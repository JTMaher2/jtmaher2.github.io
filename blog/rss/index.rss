<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>James T. Maher's Blog</title>
		<link>http://jtmaher2.github.io/blog/</link>
		<description />
		<copyright>2022</copyright>
		<pubDate>Mon, 20 Jun 2022 04:16:26 GMT</pubDate>
		<lastBuildDate>Mon, 20 Jun 2022 04:16:26 GMT</lastBuildDate>
		<item>
			<title>2016 05 26 Twisted Triangle</title>
			<link>https://jtmaher2.github.io/blog/2022/03/2016-05-26-twisted-triangle</link>
			<description>&lt;p&gt;For the &lt;a href="https://class.coursera.org/webgl-001"&gt;Interactive Graphics with WebGL&lt;/a&gt; course on Coursera, I
am making a tessellated triangle that can be twisted by a certain amount. This
project, which is a work in progress, can be viewed here:&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2022/03/2016-05-26-twisted-triangle</guid>
			<pubDate>Sun, 06 Mar 2022 20:15:29 GMT</pubDate>
			<content:encoded>&lt;script id="vertex-shader" type="x-shader/x-vertex"&gt;
attribute vec4 vPosition;

void
main()
{
    gl_Position = vPosition;
}
&lt;/script&gt;

&lt;script id="fragment-shader" type="x-shader/x-fragment"&gt;
precision mediump float;

void
main()
{
    gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
&lt;/script&gt;

&lt;script&gt;
var canvas;
var gl;
var points = [];
var NumTimesToSubdivide = 5;
var theta;

window.onload = function init() {
    canvas = document.getElementById("gl-canvas");

    gl = WebGLUtils.setupWebGL(canvas);
    if (!gl) { alert("WebGL isn't available"); }

    //
    //  Configure WebGL
    //
    gl.viewport(0, 0, canvas.width, canvas.height);
    gl.clearColor(1.0, 1.0, 1.0, 1.0);

    //  Load shaders and initialize attribute buffers
    var program = initShaders(gl, "vertex-shader", "fragment-shader");
    gl.useProgram(program);

    // Load the data into the GPU
    var bufferId = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);

    // Associate out shader variables with our data buffer
    var vPosition = gl.getAttribLocation(program, "vPosition");
    gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vPosition);

    generateGeometry();
    render();

    // slider event handler
    document.getElementById("slider").onchange = function (event) {
        theta = ((100 - event.target.value) * 3.6) * (Math.PI / 180); // convert percent to radians
        points = []; // reset points
        generateGeometry();
        render();
    };
};

function rotateVerts(vec) {
    var d = Math.sqrt(Math.pow(vec[0], 2) + Math.pow(vec[1], 2));
    var sinT = Math.sin(d * theta);
    var cosT = Math.cos(d * theta);
    var holder = vec[0];

    vec[0] = holder * cosT - vec[1] * sinT;
    vec[1] = holder * sinT + vec[1] * cosT;
}

function triangle(a, b, c) {
    rotateVerts(a);
    rotateVerts(b);
    rotateVerts(c);

    points.push(a, b, c);
}

function divideTriangle(a, b, c, count) {
    // check for end of recursion   
    if (count === 0) {
        triangle(a, b, c);
    }
    else {
        //bisect the sides
        var ab = mix(a, b, 0.5);
        var ac = mix(a, c, 0.5);
        var bc = mix(b, c, 0.5);

        --count;

        // three new triangles
        divideTriangle(a, ab, ac, count);
        divideTriangle(c, ac, bc, count);
        divideTriangle(b, bc, ab, count);
        divideTriangle(ab, ac, bc, count);
    }
}

//
//  Initialize our geometry data for the Sierpinski Gasket
//
function generateGeometry() {
    // Initialize the corners of our gasket with three points.
    var vertices = [
        vec2(Math.sin(0), Math.cos(0)),
        vec2(Math.sin(2.0 * Math.PI / 3.0), Math.cos(2.0 * Math.PI / 3.0)),
        vec2(Math.sin(2.0 * Math.PI / 3.0 * 2), Math.cos(2.0 * Math.PI / 3.0 * 2))
    ];
    divideTriangle(vertices[0], vertices[1], vertices[2], NumTimesToSubdivide);
    gl.bufferData(gl.ARRAY_BUFFER, flatten(points), gl.STATIC_DRAW);
}

function render() {
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.drawArrays(gl.TRIANGLES, 0, points.length);
}
&lt;/script&gt;
&lt;script&gt;
//
//  initShaders.js
//

function initShaders(gl, vertexShaderId, fragmentShaderId) {
    var vertShdr;
    var fragShdr;

    var vertElem = document.getElementById(vertexShaderId);
    if (!vertElem) {
        alert("Unable to load vertex shader " + vertexShaderId);
        return -1;
    }
    else {
        vertShdr = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertShdr, vertElem.text);
        gl.compileShader(vertShdr);
        if (!gl.getShaderParameter(vertShdr, gl.COMPILE_STATUS)) {
            var msg = "Vertex shader failed to compile.  The error log is:"
                + "&lt;pre&gt;" + gl.getShaderInfoLog(vertShdr) + "&lt;/pre&gt;";
            alert(msg);
            return -1;
        }
    }

    var fragElem = document.getElementById(fragmentShaderId);
    if (!fragElem) {
        alert("Unable to load vertex shader " + fragmentShaderId);
        return -1;
    }
    else {
        fragShdr = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragShdr, fragElem.text);
        gl.compileShader(fragShdr);
        if (!gl.getShaderParameter(fragShdr, gl.COMPILE_STATUS)) {
            var msg = "Fragment shader failed to compile.  The error log is:"
                + "&lt;pre&gt;" + gl.getShaderInfoLog(fragShdr) + "&lt;/pre&gt;";
            alert(msg);
            return -1;
        }
    }

    var program = gl.createProgram();
    gl.attachShader(program, vertShdr);
    gl.attachShader(program, fragShdr);
    gl.linkProgram(program);

    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        var msg = "Shader program failed to link.  The error log is:"
            + "&lt;pre&gt;" + gl.getProgramInfoLog(program) + "&lt;/pre&gt;";
        alert(msg);
        return -1;
    }

    return program;
}
&lt;/script&gt;
&lt;script&gt;
//////////////////////////////////////////////////////////////////////////////
//
//  Angel.js
//
//////////////////////////////////////////////////////////////////////////////

//----------------------------------------------------------------------------
//
//  Helper functions
//

function _argumentsToArray(args) {
    return [].concat.apply([], Array.prototype.slice.apply(args));
}

//----------------------------------------------------------------------------

function radians(degrees) {
    return degrees * Math.PI / 180.0;
}

//----------------------------------------------------------------------------
//
//  Vector Constructors
//

function vec2() {
    var result = _argumentsToArray(arguments);

    switch (result.length) {
        case 0: result.push(0.0);
        case 1: result.push(0.0);
    }

    return result.splice(0, 2);
}

function vec3() {
    var result = _argumentsToArray(arguments);

    switch (result.length) {
        case 0: result.push(0.0);
        case 1: result.push(0.0);
        case 2: result.push(0.0);
    }

    return result.splice(0, 3);
}

function vec4() {
    var result = _argumentsToArray(arguments);

    switch (result.length) {
        case 0: result.push(0.0);
        case 1: result.push(0.0);
        case 2: result.push(0.0);
        case 3: result.push(1.0);
    }

    return result.splice(0, 4);
}

//----------------------------------------------------------------------------
//
//  Matrix Constructors
//

function mat2() {
    var v = _argumentsToArray(arguments);

    var m = [];
    switch (v.length) {
        case 0:
            v[0] = 1;
        case 1:
            m = [
                vec2(v[0], 0.0),
                vec2(0.0, v[0])
            ];
            break;

        default:
            m.push(vec2(v)); v.splice(0, 2);
            m.push(vec2(v));
            break;
    }

    m.matrix = true;

    return m;
}

//----------------------------------------------------------------------------

function mat3() {
    var v = _argumentsToArray(arguments);

    var m = [];
    switch (v.length) {
        case 0:
            v[0] = 1;
        case 1:
            m = [
                vec3(v[0], 0.0, 0.0),
                vec3(0.0, v[0], 0.0),
                vec3(0.0, 0.0, v[0])
            ];
            break;

        default:
            m.push(vec3(v)); v.splice(0, 3);
            m.push(vec3(v)); v.splice(0, 3);
            m.push(vec3(v));
            break;
    }

    m.matrix = true;

    return m;
}

//----------------------------------------------------------------------------

function mat4() {
    var v = _argumentsToArray(arguments);

    var m = [];
    switch (v.length) {
        case 0:
            v[0] = 1;
        case 1:
            m = [
                vec4(v[0], 0.0, 0.0, 0.0),
                vec4(0.0, v[0], 0.0, 0.0),
                vec4(0.0, 0.0, v[0], 0.0),
                vec4(0.0, 0.0, 0.0, v[0])
            ];
            break;

        default:
            m.push(vec4(v)); v.splice(0, 4);
            m.push(vec4(v)); v.splice(0, 4);
            m.push(vec4(v)); v.splice(0, 4);
            m.push(vec4(v));
            break;
    }

    m.matrix = true;

    return m;
}

//----------------------------------------------------------------------------
//
//  Generic Mathematical Operations for Vectors and Matrices
//

function equal(u, v) {
    if (u.length != v.length) { return false; }

    if (u.matrix &amp;&amp; v.matrix) {
        for (var i = 0; i &lt; u.length; ++i) {
            if (u[i].length != v[i].length) { return false; }
            for (var j = 0; j &lt; u[i].length; ++j) {
                if (u[i][j] !== v[i][j]) { return false; }
            }
        }
    }
    else if (u.matrix &amp;&amp; !v.matrix || !u.matrix &amp;&amp; v.matrix) {
        return false;
    }
    else {
        for (var i = 0; i &lt; u.length; ++i) {
            if (u[i] !== v[i]) { return false; }
        }
    }

    return true;
}

//----------------------------------------------------------------------------

function add(u, v) {
    var result = [];

    if (u.matrix &amp;&amp; v.matrix) {
        if (u.length != v.length) {
            throw "add(): trying to add matrices of different dimensions";
        }

        for (var i = 0; i &lt; u.length; ++i) {
            if (u[i].length != v[i].length) {
                throw "add(): trying to add matrices of different dimensions";
            }
            result.push([]);
            for (var j = 0; j &lt; u[i].length; ++j) {
                result[i].push(u[i][j] + v[i][j]);
            }
        }

        result.matrix = true;

        return result;
    }
    else if (u.matrix &amp;&amp; !v.matrix || !u.matrix &amp;&amp; v.matrix) {
        throw "add(): trying to add matrix and non-matrix variables";
    }
    else {
        if (u.length != v.length) {
            throw "add(): vectors are not the same dimension";
        }

        for (var i = 0; i &lt; u.length; ++i) {
            result.push(u[i] + v[i]);
        }

        return result;
    }
}

//----------------------------------------------------------------------------

function subtract(u, v) {
    var result = [];

    if (u.matrix &amp;&amp; v.matrix) {
        if (u.length != v.length) {
            throw "subtract(): trying to subtract matrices" +
            " of different dimensions";
        }

        for (var i = 0; i &lt; u.length; ++i) {
            if (u[i].length != v[i].length) {
                throw "subtract(): trying to subtact matrices" +
                " of different dimensions";
            }
            result.push([]);
            for (var j = 0; j &lt; u[i].length; ++j) {
                result[i].push(u[i][j] - v[i][j]);
            }
        }

        result.matrix = true;

        return result;
    }
    else if (u.matrix &amp;&amp; !v.matrix || !u.matrix &amp;&amp; v.matrix) {
        throw "subtact(): trying to subtact  matrix and non-matrix variables";
    }
    else {
        if (u.length != v.length) {
            throw "subtract(): vectors are not the same length";
        }

        for (var i = 0; i &lt; u.length; ++i) {
            result.push(u[i] - v[i]);
        }

        return result;
    }
}

//----------------------------------------------------------------------------

function mult(u, v) {
    var result = [];

    if (u.matrix &amp;&amp; v.matrix) {
        if (u.length != v.length) {
            throw "mult(): trying to add matrices of different dimensions";
        }

        for (var i = 0; i &lt; u.length; ++i) {
            if (u[i].length != v[i].length) {
                throw "mult(): trying to add matrices of different dimensions";
            }
        }

        for (var i = 0; i &lt; u.length; ++i) {
            result.push([]);

            for (var j = 0; j &lt; v.length; ++j) {
                var sum = 0.0;
                for (var k = 0; k &lt; u.length; ++k) {
                    sum += u[i][k] * v[k][j];
                }
                result[i].push(sum);
            }
        }

        result.matrix = true;

        return result;
    }
    else {
        if (u.length != v.length) {
            throw "mult(): vectors are not the same dimension";
        }

        for (var i = 0; i &lt; u.length; ++i) {
            result.push(u[i] * v[i]);
        }

        return result;
    }
}

//----------------------------------------------------------------------------
//
//  Basic Transformation Matrix Generators
//

function translate(x, y, z) {
    if (Array.isArray(x) &amp;&amp; x.length == 3) {
        z = x[2];
        y = x[1];
        x = x[0];
    }

    var result = mat4();
    result[0][3] = x;
    result[1][3] = y;
    result[2][3] = z;

    return result;
}

//----------------------------------------------------------------------------

function rotate(angle, axis) {
    if (!Array.isArray(axis)) {
        axis = [arguments[1], arguments[2], arguments[3]];
    }

    var v = normalize(axis);

    var x = v[0];
    var y = v[1];
    var z = v[2];

    var c = Math.cos(radians(angle));
    var omc = 1.0 - c;
    var s = Math.sin(radians(angle));

    var result = mat4(
        vec4(x * x * omc + c, x * y * omc - z * s, x * z * omc + y * s, 0.0),
        vec4(x * y * omc + z * s, y * y * omc + c, y * z * omc - x * s, 0.0),
        vec4(x * z * omc - y * s, y * z * omc + x * s, z * z * omc + c, 0.0),
        vec4()
    );

    return result;
}

//----------------------------------------------------------------------------

function scale(x, y, z) {
    if (Array.isArray(x) &amp;&amp; x.length == 3) {
        z = x[2];
        y = x[1];
        x = x[0];
    }

    var result = mat4();
    result[0][0] = x;
    result[1][1] = y;
    result[2][2] = z;

    return result;
}

//----------------------------------------------------------------------------
//
//  ModelView Matrix Generators
//

function lookAt(eye, at, up) {
    if (!Array.isArray(eye) || eye.length != 3) {
        throw "lookAt(): first parameter [eye] must be an a vec3";
    }

    if (!Array.isArray(at) || at.length != 3) {
        throw "lookAt(): first parameter [at] must be an a vec3";
    }

    if (!Array.isArray(up) || up.length != 3) {
        throw "lookAt(): first parameter [up] must be an a vec3";
    }

    if (equal(eye, at)) {
        return mat4();
    }

    var v = normalize(subtract(at, eye));  // view direction vector
    var n = normalize(cross(v, up));       // perpendicular vector
    var u = normalize(cross(n, v));        // "new" up vector

    v = negate(v);

    var result = mat4(
        vec4(n, -dot(n, eye)),
        vec4(u, -dot(u, eye)),
        vec4(v, -dot(v, eye)),
        vec4()
    );

    return result;
}

//----------------------------------------------------------------------------
//
//  Projection Matrix Generators
//

function ortho(left, right, bottom, top, near, far) {
    if (left == right) { throw "ortho(): left and right are equal"; }
    if (bottom == top) { throw "ortho(): bottom and top are equal"; }
    if (near == far) { throw "ortho(): near and far are equal"; }

    var w = right - left;
    var h = top - bottom;
    var d = far - near;

    var result = mat4();
    result[0][0] = 2.0 / w;
    result[1][1] = 2.0 / h;
    result[2][2] = -2.0 / d;
    result[0][3] = (left + right) / w;
    result[1][3] = (top + bottom) / h;
    result[2][3] = (near + far) / d;

    return result;
}

//----------------------------------------------------------------------------

function perspective(fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(radians(fovy) / 2);
    var d = far - near;

    var result = mat4();
    result[0][0] = f / aspect;
    result[1][1] = f;
    result[2][2] = -(near + far) / d;
    result[2][3] = -2 * near * far / d;
    result[3][2] = -1;
    result[3][3] = 0.0;

    return result;
}

//----------------------------------------------------------------------------
//
//  Matrix Functions
//

function transpose(m) {
    if (!m.matrix) {
        return "transpose(): trying to transpose a non-matrix";
    }

    var result = [];
    for (var i = 0; i &lt; m.length; ++i) {
        result.push([]);
        for (var j = 0; j &lt; m[i].length; ++j) {
            result[i].push(m[j][i]);
        }
    }

    result.matrix = true;

    return result;
}

//----------------------------------------------------------------------------
//
//  Vector Functions
//

function dot(u, v) {
    if (u.length != v.length) {
        throw "dot(): vectors are not the same dimension";
    }

    var sum = 0.0;
    for (var i = 0; i &lt; u.length; ++i) {
        sum += u[i] * v[i];
    }

    return sum;
}

//----------------------------------------------------------------------------

function negate(u) {
    result = [];
    for (var i = 0; i &lt; u.length; ++i) {
        result.push(-u[i]);
    }

    return result;
}

//----------------------------------------------------------------------------

function cross(u, v) {
    if (!Array.isArray(u) || u.length &lt; 3) {
        throw "cross(): first argument is not a vector of at least 3";
    }

    if (!Array.isArray(v) || v.length &lt; 3) {
        throw "cross(): second argument is not a vector of at least 3";
    }

    var result = [
        u[1] * v[2] - u[2] * v[1],
        u[2] * v[0] - u[0] * v[2],
        u[0] * v[1] - u[1] * v[0]
    ];

    return result;
}

//----------------------------------------------------------------------------

function length(u) {
    return Math.sqrt(dot(u, u));
}

//----------------------------------------------------------------------------

function normalize(u, excludeLastComponent) {
    if (excludeLastComponent) {
        var last = u.pop();
    }

    var len = length(u);

    if (!isFinite(len)) {
        throw "normalize: vector " + u + " has zero length";
    }

    for (var i = 0; i &lt; u.length; ++i) {
        u[i] /= len;
    }

    if (excludeLastComponent) {
        u.push(last);
    }

    return u;
}

//----------------------------------------------------------------------------

function mix(u, v, s) {
    if (typeof s !== "number") {
        throw "mix: the last paramter " + s + " must be a number";
    }

    if (u.length != v.length) {
        throw "vector dimension mismatch";
    }

    var result = [];
    for (var i = 0; i &lt; u.length; ++i) {
        result.push(s * u[i] + (1.0 - s) * v[i]);
    }

    return result;
}

//----------------------------------------------------------------------------
//
// Vector and Matrix functions
//

function scale(s, u) {
    if (!Array.isArray(u)) {
        throw "scale: second parameter " + u + " is not a vector";
    }

    result = [];
    for (var i = 0; i &lt; u.length; ++i) {
        result.push(s * u[i]);
    }

    return result;
}

//----------------------------------------------------------------------------
//
//
//

function flatten(v) {
    if (v.matrix === true) {
        v = transpose(v);
    }

    var n = v.length;
    var elemsAreArrays = false;

    if (Array.isArray(v[0])) {
        elemsAreArrays = true;
        n *= v[0].length;
    }

    var floats = new Float32Array(n);

    if (elemsAreArrays) {
        var idx = 0;
        for (var i = 0; i &lt; v.length; ++i) {
            for (var j = 0; j &lt; v[i].length; ++j) {
                floats[idx++] = v[i][j];
            }
        }
    }
    else {
        for (var i = 0; i &lt; v.length; ++i) {
            floats[i] = v[i];
        }
    }

    return floats;
}

//----------------------------------------------------------------------------

var sizeof = {
    'vec2': new Float32Array(flatten(vec2())).byteLength,
    'vec3': new Float32Array(flatten(vec3())).byteLength,
    'vec4': new Float32Array(flatten(vec4())).byteLength,
    'mat2': new Float32Array(flatten(mat2())).byteLength,
    'mat3': new Float32Array(flatten(mat3())).byteLength,
    'mat4': new Float32Array(flatten(mat4())).byteLength
};
&lt;/script&gt;
&lt;script&gt;
/*
* Copyright 2010, Google Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*
*     * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following disclaimer
* in the documentation and/or other materials provided with the
* distribution.
*     * Neither the name of Google Inc. nor the names of its
* contributors may be used to endorse or promote products derived from
* this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


/**
    * fileoverview This file contains functions every webgl program will need
    * a version of one way or another.
    *
    * Instead of setting up a context manually it is recommended to
    * use. This will check for success or failure. On failure it
    * will attempt to present an approriate message to the user.
    *
    *       gl = WebGLUtils.setupWebGL(canvas);
    *
    * For animated WebGL apps use of setTimeout or setInterval are
    * discouraged. It is recommended you structure your rendering
    * loop like this.
    *
    *       function render() {
    *         window.requestAnimFrame(render, canvas);
    *
    *         // do rendering
    *         ...
    *       }
    *       render();
    *
    * This will call your rendering function up to the refresh rate
    * of your display but will stop rendering if your app is not
    * visible.
    */

WebGLUtils = function () {

    /**
        * Creates the HTLM for a failure message
        * param string canvasContainerId id of container of th
        *        canvas.
        * return string The html.
        */
    var makeFailHTML = function (msg) {
        return '' +
            '&lt;table style="background-color: #8CE; width: 100%; height: 100%;"&gt;&lt;tr&gt;' +
            '&lt;td align="center"&gt;' +
            '&lt;div style="display: table-cell; vertical-align: middle;"&gt;' +
            '&lt;div style=""&gt;' + msg + '&lt;/div&gt;' +
            '&lt;/div&gt;' +
            '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
    };

    /**
        * Mesasge for getting a webgl browser
        * type string
        */
    var GET_A_WEBGL_BROWSER = '' +
        'This page requires a browser that supports WebGL.&lt;br/&gt;' +
        '&lt;a href="http://get.webgl.org"&gt;Click here to upgrade your browser.&lt;/a&gt;';

    /**
        * Mesasge for need better hardware
        * type string
        */
    var OTHER_PROBLEM = '' +
        "It doesn't appear your computer can support WebGL.&lt;br/&gt;" +
        '&lt;a href="http://get.webgl.org/troubleshooting/"&gt;Click here for more information.&lt;/a&gt;';

    /**
        * Creates a webgl context. If creation fails it will
        * change the contents of the container of the &lt;canvas&gt;
        * tag to an error message with the correct links for WebGL.
        * param {Element} canvas. The canvas element to create a
        *     context from.
        * param {WebGLContextCreationAttirbutes} opt_attribs Any
        *     creation attributes you want to pass in.
        * return {WebGLRenderingContext} The created context.
        */
    var setupWebGL = function (canvas, opt_attribs) {
        function showLink(str) {
            var container = canvas.parentNode;
            if (container) {
                container.innerHTML = makeFailHTML(str);
            }
        };

        if (!window.WebGLRenderingContext) {
            showLink(GET_A_WEBGL_BROWSER);
            return null;
        }

        var context = create3DContext(canvas, opt_attribs);
        if (!context) {
            showLink(OTHER_PROBLEM);
        }
        return context;
    };

    /**
        * Creates a webgl context.
        * param {!Canvas} canvas The canvas tag to get context
        *     from. If one is not passed in one will be created.
        * return {!WebGLContext} The created context.
        */
    var create3DContext = function (canvas, opt_attribs) {
        var names = ["webgl", "experimental-webgl", "webkit-3d", "moz-webgl"];
        var context = null;
        for (var ii = 0; ii &lt; names.length; ++ii) {
            try {
                context = canvas.getContext(names[ii], opt_attribs);
            } catch (e) { }
            if (context) {
                break;
            }
        }
        return context;
    }

    return {
        create3DContext: create3DContext,
        setupWebGL: setupWebGL
    };
}();

/**
    * Provides requestAnimationFrame in a cross browser way.
    */
window.requestAnimFrame = (function () {
    return window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function (/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
            window.setTimeout(callback, 1000 / 60);
        };
})();
&lt;/script&gt;
&lt;h2&gt;Originally Published: 2016-05-26&lt;/h2&gt;
&lt;p&gt;For the &lt;a href="https://class.coursera.org/webgl-001"&gt;Interactive Graphics with WebGL&lt;/a&gt; course on Coursera, I
am making a tessellated triangle that can be twisted by a certain amount. This
project, which is a work in progress, can be viewed here:&lt;/p&gt;
&lt;div&gt;
twist 0 &lt;input id="slider" type="range" min="0" max="100" step="10" value="50" /&gt;
 100
&lt;/div&gt;
&lt;canvas id="gl-canvas" width="512" height="512"&gt;
Oops ... your browser doesn't support the HTML5 canvas element
&lt;/canvas&gt;

</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Music Recorder UWP</title>
			<link>https://jtmaher2.github.io/blog/2021/07/2021-07-17-music-recorder-uwp</link>
			<description>&lt;p&gt;There is now a UWP version of the Music Recorder app that is compatible with Windows 10 Spring 2020 update or later. It can be found at &lt;a href="https://github.com/JTMaher2/MusicRecorder/releases/tag/1.0.5"&gt;https://github.com/JTMaher2/MusicRecorder/releases/tag/1.0.5&lt;/a&gt;.&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2021/07/2021-07-17-music-recorder-uwp</guid>
			<pubDate>Sat, 17 Jul 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;There is now a UWP version of the Music Recorder app that is compatible with Windows 10 Spring 2020 update or later. It can be found at &lt;a href="https://github.com/JTMaher2/MusicRecorder/releases/tag/1.0.5"&gt;https://github.com/JTMaher2/MusicRecorder/releases/tag/1.0.5&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Statiq.Web</title>
			<link>https://jtmaher2.github.io/blog/2020/12/2020-12-27-statiq-web</link>
			<description>&lt;p&gt;I have transitioned my blog from Jekyll and Ruby to &lt;a href="https://statiq.dev/web/"&gt;Statiq.Web&lt;/a&gt; and C#.&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2020/12/2020-12-27-statiq-web</guid>
			<pubDate>Sun, 27 Dec 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I have transitioned my blog from Jekyll and Ruby to &lt;a href="https://statiq.dev/web/"&gt;Statiq.Web&lt;/a&gt; and C#.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Music Recorder</title>
			<link>https://jtmaher2.github.io/blog/2020/12/2020-12-27-music-recorder</link>
			<description>&lt;p&gt;The Music Repertoire App is now called &amp;quot;Music Recorder,&amp;quot; and has been re-written using Xamarin and C#. It can be found &lt;a href="https://github.com/JTMaher2/MusicRecorder"&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2020/12/2020-12-27-music-recorder</guid>
			<pubDate>Sun, 27 Dec 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The Music Repertoire App is now called &amp;quot;Music Recorder,&amp;quot; and has been re-written using Xamarin and C#. It can be found &lt;a href="https://github.com/JTMaher2/MusicRecorder"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Music Repertoire App</title>
			<link>https://jtmaher2.github.io/blog/2019/01/2019-01-01-music-repertoire-app</link>
			<description>&lt;p&gt;I have made an app that allows users to record music pieces that they are working on, and to make remixes of these pieces. Its releases can be found &lt;a href="https://github.com/JTMaher2/MusicRepertoireAppReleases"&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2019/01/2019-01-01-music-repertoire-app</guid>
			<pubDate>Tue, 01 Jan 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I have made an app that allows users to record music pieces that they are working on, and to make remixes of these pieces. Its releases can be found &lt;a href="https://github.com/JTMaher2/MusicRepertoireAppReleases"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Passwordr Pwned Passwords API</title>
			<link>https://jtmaher2.github.io/blog/2018/04/2018-04-14-passwordr-pwned-passwords-api</link>
			<description>&lt;p&gt;Today, I am announcing integration of the &lt;a href="https://haveibeenpwned.com/API/v2"&gt;Pwned Passwords API&lt;/a&gt; with Passwordr (both Web and Android).
You can now check any or all of your passwords with this API to see if they appear in any of the data breaches to which the Pwned Passwords API has access.&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2018/04/2018-04-14-passwordr-pwned-passwords-api</guid>
			<pubDate>Sat, 14 Apr 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Today, I am announcing integration of the &lt;a href="https://haveibeenpwned.com/API/v2"&gt;Pwned Passwords API&lt;/a&gt; with Passwordr (both Web and Android).
You can now check any or all of your passwords with this API to see if they appear in any of the data breaches to which the Pwned Passwords API has access.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Passwordr for Android</title>
			<link>https://jtmaher2.github.io/blog/2018/04/2018-04-14-passwordr-android</link>
			<description>&lt;p&gt;Today, I am announcing &lt;a href="https://github.com/JTMaher2/Passwordr-Android"&gt;Passwordr for Android&lt;/a&gt;, an Android app for managing passwords with a single master password.
You can log into Passwordr for Android with your Google, Facebook, or Twitter account, along with a master password. This password does not have to be the same as your Google, Facebook, or Twitter password.&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2018/04/2018-04-14-passwordr-android</guid>
			<pubDate>Sat, 14 Apr 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Today, I am announcing &lt;a href="https://github.com/JTMaher2/Passwordr-Android"&gt;Passwordr for Android&lt;/a&gt;, an Android app for managing passwords with a single master password.
You can log into Passwordr for Android with your Google, Facebook, or Twitter account, along with a master password. This password does not have to be the same as your Google, Facebook, or Twitter password.&lt;/p&gt;
&lt;p&gt;Passwordr for Android is open source. Its code can be found &lt;a href="https://github.com/JTMaher2/Passwordr-Android"&gt;here&lt;/a&gt;.
Passwordr for Android uses the &lt;a href="https://docs.oracle.com/javase/7/docs/api/javax/crypto/Cipher.html"&gt;javax.crypto library&lt;/a&gt; to securely encrypt all data. It stores everything in a &lt;a href="https://firebase.google.com/docs/firestore/"&gt;Cloud Firestore&lt;/a&gt; database.
Passwordr for Android has been tested to work on devices 6.0 (Marshmallow) or later. If you have any feedback, feel free to open a new issue on Github.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Passwordr</title>
			<link>https://jtmaher2.github.io/blog/2017/12/2017-12-27-passwordr</link>
			<description>&lt;p&gt;Today, I am announcing &lt;a href="https://passwordr-3917b.firebaseapp.com/"&gt;Passwordr&lt;/a&gt;, a website for managing passwords with a single master password.
You can log into Passwordr with your Google account. After you log in, you will be prompted for a master password. This password does not have to be the same as your Google password.&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2017/12/2017-12-27-passwordr</guid>
			<pubDate>Wed, 27 Dec 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Today, I am announcing &lt;a href="https://passwordr-3917b.firebaseapp.com/"&gt;Passwordr&lt;/a&gt;, a website for managing passwords with a single master password.
You can log into Passwordr with your Google account. After you log in, you will be prompted for a master password. This password does not have to be the same as your Google password.&lt;/p&gt;
&lt;p&gt;Passwordr is open source. Its code can be found &lt;a href="https://github.com/jtmaher2/passwordr-site"&gt;here&lt;/a&gt;.
Passwordr uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/"&gt;Web Cryptography API&lt;/a&gt; to securely encrypt all data. It stores everything in a &lt;a href="https://firebase.google.com/docs/firestore/"&gt;Cloud Firestore&lt;/a&gt; database.
Passwordr has been tested to work in Chrome, Edge, and Firefox. If you have any feedback, feel free to open a new issue on Github.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>How to install the Play Store in an API 25 emulator</title>
			<link>https://jtmaher2.github.io/blog/2016/12/2016-12-28-android-emulator-play-store</link>
			<description>&lt;p&gt;&lt;strong&gt;UPDATE 7-15-2018:&lt;/strong&gt;&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2016/12/2016-12-28-android-emulator-play-store</guid>
			<pubDate>Wed, 28 Dec 2016 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;strong&gt;UPDATE 7-15-2018:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;As of Android Studio 3.0, this procedure is no longer necessary, as there are both Nexus 5 and Nexus 5X AVD images available with Google Play already installed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recently was in a situation where I needed to test a Google Maps API app on a virtual device.
When I launched the app, I got an error message about Google Play services needing to be
installed in order for the app to be usable. This was strange, I thought, because I had
intentionally downloaded the Google Play Services image instead of the plain one. However, it
seems that, even if you download the Google Play Services image, you still need to have the
Play Store installed in order to use the Maps API. Currently, the only Android emulator with
official support for the Play Store is Genymotion, which is a paid product. Instead of this,
I decided to try to manually install the Play Store from the OpenGapps &amp;quot;Pico&amp;quot;
package (&lt;a href="http://opengapps.org/"&gt;http://opengapps.org/&lt;/a&gt;). This package contains a directory called &amp;quot;Core,&amp;quot; which contains a large number of
.tar.lz archives. To extract these archives, you must use L-Zip (&lt;a href="http://www.nongnu.org/lzip/lzip.html"&gt;http://www.nongnu.org/lzip/lzip.html&lt;/a&gt;). However, doing this
only extracts the .lz part. In order to extract the full archive, you must use another
program that is capable of processing .tar files (e.g. &lt;a href="http://www.7-zip.org/"&gt;7-zip&lt;/a&gt;). The archives that you need
to extract are: gmscore-X (where X is the type of image you are using),
gsfcore-all, gsflogin-all, and vending-all. Before these archives can be pushed to the
emulator, you must start the emulator in writable mode. To do this, open a command prompt
to the Android\sdk\tools\ directory and type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emulator -avd YOUR_DEVICE_NAME -writable-system -selinux permissive&lt;/code&gt;&lt;/pre&gt;.
&lt;p&gt;Once the emulator has been opened, start a new command prompt in the
Android\sdk\platform-tools\ directory and type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adb root
adb remount&lt;/code&gt;&lt;/pre&gt; in order to remount the filesystem in writable mode.
&lt;p&gt;You now will be able to push the previously-extracted APKs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adb push PrebuiltGmsCore.apk /system/priv-app/PrebuiltGmsCore
adb push GoogleServicesFramework.apk /system/priv-app/GoogleServicesFramework
adb push GoogleLoginService.apk /system/priv-app/GoogleLoginService
adb push Phonesky.apk /system/priv-app/Phonesky
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, you must make these APKs executable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adb shell
chmod 777 /system/priv-app/PrebuiltGmsCore
chmod 777 /system/priv-app/GoogleServicesFramework
chmod 777 /system/priv-app/GoogleLoginService
chmod 777 /system/priv-app/Phonesky
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, restart the emulator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adb stop
adb start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you encounter messages about Google Play Services not behaving properly (e.g. crashing), try deleting the current AVD and making a new one using the image that you just patched.&lt;/p&gt;
&lt;p&gt;Now, you should see the Play Store icon on your dashboard.&lt;/p&gt;
&lt;p&gt;I would like to thank the people who replied to these StackOverflow posts: &lt;a href="http://stackoverflow.com/questions/5095234/how-to-get-root-access-on-android-emulator"&gt;http://stackoverflow.com/questions/5095234/how-to-get-root-access-on-android-emulator&lt;/a&gt;, &lt;a href="http://stackoverflow.com/questions/34291902/android-studio-emulator-does-not-come-with-play-store-for-api-23"&gt;http://stackoverflow.com/questions/34291902/android-studio-emulator-does-not-come-with-play-store-for-api-23&lt;/a&gt;
for helping me figure this out.&lt;/p&gt;
&lt;p&gt;Comments? Did this not work? Send me a message at jtmaher2(at)gmail(dot)com, or follow me on Twitter.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Android Movie Info App</title>
			<link>https://jtmaher2.github.io/blog/2016/07/2016-07-02-android-movie-info</link>
			<description>&lt;p&gt;For the &lt;a href="https://www.udacity.com/course/developing-android-apps--ud853"&gt;Developing Android Apps&lt;/a&gt; course on Udacity, I
have made an app that displays information about popular and top-rated
movies. It gets this information in JSON format from &lt;a href="https://www.themoviedb.org/"&gt;The Movie DB&lt;/a&gt;. This
app also shows details about specific movies, and allows the user to mark
favorites. You can find the source code, and an APK, &lt;a href="https://github.com/JTMaher2/Movie-Info-App"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;</description>
			<guid>https://jtmaher2.github.io/blog/2016/07/2016-07-02-android-movie-info</guid>
			<pubDate>Sat, 02 Jul 2016 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;For the &lt;a href="https://www.udacity.com/course/developing-android-apps--ud853"&gt;Developing Android Apps&lt;/a&gt; course on Udacity, I
have made an app that displays information about popular and top-rated
movies. It gets this information in JSON format from &lt;a href="https://www.themoviedb.org/"&gt;The Movie DB&lt;/a&gt;. This
app also shows details about specific movies, and allows the user to mark
favorites. You can find the source code, and an APK, &lt;a href="https://github.com/JTMaher2/Movie-Info-App"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some screenshots:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jtmaher2.github.io/assets/img/movie-info-app-1.png" alt="popular movies"&gt;
&lt;img src="https://jtmaher2.github.io/assets/img/movie-info-app-2.png" alt="top rated movies"&gt;
&lt;img src="https://jtmaher2.github.io/assets/img/movie-info-app-3.png" alt="favorite movies"&gt;
&lt;img src="https://jtmaher2.github.io/assets/img/movie-info-app-4.png" alt="movie details"&gt;
&lt;img src="https://jtmaher2.github.io/assets/img/movie-info-app-5.png" alt="settings"&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>